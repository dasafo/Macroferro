#!/usr/bin/env python3
"""
üß™ TEST DE FUNCIONALIDAD T√âCNICA - BOT MACROFERRO

Este script simula diferentes tipos de consultas t√©cnicas que un usuario
podr√≠a hacer al bot de Macroferro para validar las nuevas capacidades.
"""

import asyncio
import sys
import os
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session

# A√±adir el directorio ra√≠z al path para imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.services.telegram_service import TelegramBotService
from app.db.database import SessionLocal
from app.core.config import settings

class TechnicalQuestionsTest:
    def __init__(self):
        self.telegram_service = TelegramBotService()
        # Usar chat_id de prueba
        self.test_chat_id = 12345

    def print_header(self, title: str, emoji: str = "üîç"):
        """Imprime un encabezado formateado para las secciones de prueba"""
        print(f"\n{emoji} {title.upper()}")
        print("=" * 60)

    def print_question(self, question: str):
        """Imprime una pregunta de prueba formateada"""
        print(f"‚ùì Pregunta: '{question}'")
        print("-" * 60)

    async def test_question(self, db: Session, question: str):
        """Prueba una pregunta espec√≠fica y muestra la respuesta"""
        try:
            response = await self.telegram_service.process_message(
                db=db, 
                message_text=question, 
                chat_id=self.test_chat_id
            )
            print(f"ü§ñ Respuesta del bot:")
            print(response)
            print("\n" + "=" * 80 + "\n")
            
        except Exception as e:
            print(f"‚ùå Error procesando pregunta: {e}")
            print("\n" + "=" * 80 + "\n")

    async def run_basic_tests(self):
        """Ejecuta pruebas b√°sicas de funcionalidad"""
        # Usar SessionLocal para obtener una sesi√≥n s√≠ncrona
        db = SessionLocal()
        
        try:
            print("=" * 80)
            print("ü§ñ PRUEBA B√ÅSICA DE FUNCIONALIDAD - BOT MACROFERRO")
            print("=" * 80)
            print("üìã Probando capacidades mejoradas del bot:")
            print("   ‚Ä¢ Respuestas generales")
            print("   ‚Ä¢ B√∫squeda b√°sica de productos")
            print("   ‚Ä¢ Preguntas t√©cnicas simples")
            print("=" * 80)

            # Pruebas b√°sicas
            basic_tests = [
                "Hola, ¬øc√≥mo est√°n?",
                "¬øQu√© productos manejan?",
                "Busco tubos de PVC",
                "¬øTienen v√°lvulas de bola?",
                "¬øQu√© di√°metro tiene el tubo de PVC?"
            ]

            for question in basic_tests:
                self.print_question(question)
                await self.test_question(db, question)
                
                # Pausa peque√±a entre preguntas para evitar sobrecarga
                await asyncio.sleep(1)

        finally:
            db.close()

    async def run_technical_tests(self):
        """Ejecuta pruebas t√©cnicas espec√≠ficas"""
        db = SessionLocal()
        
        try:
            self.print_header("PREGUNTAS T√âCNICAS ESPEC√çFICAS", "üîß")
            
            technical_tests = [
                "¬øCu√°l es la presi√≥n m√°xima del tubo de PVC de 110mm?",
                "¬øDe qu√© material est√° hecha la v√°lvula de bola de 2 pulgadas?",
                "¬øQu√© certificaciones tiene el taladro percutor de 800W?",
                "¬øEs compatible con agua potable el tubo PVC?"
            ]

            for question in technical_tests:
                self.print_question(question)
                await self.test_question(db, question)
                await asyncio.sleep(1)
                
        finally:
            db.close()

    async def run_all_tests(self):
        """Ejecuta todas las pruebas"""
        await self.run_basic_tests()
        await self.run_technical_tests()
        
        print("‚úÖ PRUEBAS COMPLETADAS")
        print("üìä Revisa los resultados para validar:")
        print("   ‚Ä¢ Clasificaci√≥n correcta de intenciones")
        print("   ‚Ä¢ B√∫squeda relevante de productos")
        print("   ‚Ä¢ An√°lisis preciso de especificaciones")
        print("   ‚Ä¢ Calidad de respuestas generadas")

async def main():
    """Funci√≥n principal para ejecutar las pruebas"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Test del bot de Macroferro')
    parser.add_argument('--basic', action='store_true', help='Ejecutar solo pruebas b√°sicas')
    parser.add_argument('--technical', action='store_true', help='Ejecutar solo pruebas t√©cnicas')
    parser.add_argument('--interactive', action='store_true', help='Modo interactivo')
    
    args = parser.parse_args()
    
    tester = TechnicalQuestionsTest()
    
    try:
        if args.basic:
            await tester.run_basic_tests()
        elif args.technical:
            await tester.run_technical_tests()
        elif args.interactive:
            # Modo interactivo simple
            db = SessionLocal()
            try:
                print("ü§ñ Bot de Macroferro - Modo Interactivo")
                print("Escribe 'exit' para salir\n")
                
                while True:
                    question = input("‚ùì Tu pregunta: ").strip()
                    if question.lower() in ['exit', 'salir', 'quit']:
                        print("üëã ¬°Hasta luego!")
                        break
                    
                    if question:
                        print("-" * 40)
                        await tester.test_question(db, question)
            finally:
                db.close()
        else:
            await tester.run_all_tests()
            
    except KeyboardInterrupt:
        print("\nüëã Pruebas interrumpidas por el usuario")
    except Exception as e:
        print(f"‚ùå Error durante las pruebas: {e}")

if __name__ == "__main__":
    asyncio.run(main()) 