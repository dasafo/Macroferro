#!/bin/bash

echo "ü§ñ Auto-iniciador del t√∫nel Cloudflare"

# Configuraci√≥n
TUNNEL_NAME="macroferro-bot"
DOMAIN="bot.dasafodata.com"
LOCAL_URL="http://localhost:8000"
HEALTH_ENDPOINT="/api/v1/telegram/health"
CHECK_INTERVAL=10  # segundos

# Colores
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() {
    echo -e "[$(date '+%H:%M:%S')] $1"
}

# Funci√≥n para verificar si el backend est√° corriendo
check_backend() {
    curl -s -f --max-time 5 ${LOCAL_URL}${HEALTH_ENDPOINT} > /dev/null 2>&1
    return $?
}

# Funci√≥n para verificar si el t√∫nel est√° corriendo
check_tunnel() {
    curl -s -f --max-time 10 https://${DOMAIN}${HEALTH_ENDPOINT} > /dev/null 2>&1
    return $?
}

# Funci√≥n para iniciar el t√∫nel
start_tunnel() {
    log "${BLUE}üåê Iniciando t√∫nel...${NC}"
    
    # Obtener token
    TOKEN=$(cloudflared tunnel token ${TUNNEL_NAME} 2>/dev/null)
    if [ $? -ne 0 ]; then
        log "${RED}‚ùå Error obteniendo token del t√∫nel${NC}"
        return 1
    fi
    
    # Matar procesos anteriores
    pkill -f cloudflared 2>/dev/null || true
    sleep 2
    
    # Iniciar t√∫nel en segundo plano
    nohup cloudflared tunnel run --token ${TOKEN} --loglevel warn > /dev/null 2>&1 &
    TUNNEL_PID=$!
    
    # Esperar un poco para que se conecte
    sleep 15
    
    # Verificar que funcione
    if check_tunnel; then
        log "${GREEN}‚úÖ T√∫nel iniciado correctamente (PID: ${TUNNEL_PID})${NC}"
        echo ${TUNNEL_PID} > /tmp/cloudflared.pid
        return 0
    else
        log "${RED}‚ùå T√∫nel no pudo conectarse${NC}"
        kill ${TUNNEL_PID} 2>/dev/null || true
        return 1
    fi
}

# Funci√≥n principal de monitoreo
monitor() {
    log "${BLUE}üëÄ Iniciando monitoreo autom√°tico...${NC}"
    log "${YELLOW}üí° Presiona Ctrl+C para detener${NC}"
    
    while true; do
        # Verificar backend
        if ! check_backend; then
            log "${YELLOW}‚è≥ Esperando que el backend est√© listo...${NC}"
            sleep ${CHECK_INTERVAL}
            continue
        fi
        
        # Backend est√° corriendo, verificar t√∫nel
        if ! check_tunnel; then
            log "${YELLOW}üîß Backend listo, t√∫nel no conectado. Iniciando t√∫nel...${NC}"
            if start_tunnel; then
                log "${GREEN}üéâ ¬°Bot completamente operativo!${NC}"
                log "${BLUE}üì± URL: https://${DOMAIN}${NC}"
            else
                log "${RED}‚ùå Error iniciando t√∫nel, reintentando en ${CHECK_INTERVAL}s...${NC}"
            fi
        else
            # Todo est√° funcionando
            log "${GREEN}‚úÖ Backend y t√∫nel funcionando correctamente${NC}"
        fi
        
        sleep ${CHECK_INTERVAL}
    done
}

# Funci√≥n de cleanup al salir
cleanup() {
    log "${YELLOW}üõë Deteniendo monitoreo...${NC}"
    if [ -f /tmp/cloudflared.pid ]; then
        TUNNEL_PID=$(cat /tmp/cloudflared.pid)
        if kill -0 ${TUNNEL_PID} 2>/dev/null; then
            log "${BLUE}üîå Deteniendo t√∫nel (PID: ${TUNNEL_PID})...${NC}"
            kill ${TUNNEL_PID}
        fi
        rm -f /tmp/cloudflared.pid
    fi
    log "${GREEN}üëã ¬°Hasta luego!${NC}"
    exit 0
}

# Configurar trap para cleanup
trap cleanup SIGINT SIGTERM

# Ejecutar seg√∫n par√°metro
case "${1:-monitor}" in
    "start")
        log "${BLUE}üöÄ Iniciando t√∫nel manualmente...${NC}"
        if check_backend; then
            start_tunnel
        else
            log "${RED}‚ùå Backend no est√° corriendo${NC}"
            exit 1
        fi
        ;;
    "monitor")
        monitor
        ;;
    "stop")
        if [ -f /tmp/cloudflared.pid ]; then
            TUNNEL_PID=$(cat /tmp/cloudflared.pid)
            if kill -0 ${TUNNEL_PID} 2>/dev/null; then
                log "${BLUE}üîå Deteniendo t√∫nel...${NC}"
                kill ${TUNNEL_PID}
                rm -f /tmp/cloudflared.pid
                log "${GREEN}‚úÖ T√∫nel detenido${NC}"
            else
                log "${YELLOW}‚ö†Ô∏è  T√∫nel no estaba corriendo${NC}"
            fi
        else
            log "${YELLOW}‚ö†Ô∏è  No se encontr√≥ PID del t√∫nel${NC}"
        fi
        ;;
    *)
        echo "Uso: $0 [start|monitor|stop]"
        echo "  start   - Iniciar t√∫nel una vez"
        echo "  monitor - Monitorear y auto-iniciar (por defecto)"
        echo "  stop    - Detener t√∫nel"
        exit 1
        ;;
esac 