services:
  postgres:
    image: postgres:15
    container_name: macroferro_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-macroferro_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db_scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  pgadmin:
    image: dpage/pgadmin4
    container_name: macroferro_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - postgres

  redis:
    image: redis:7-alpine
    container_name: macroferro_redis
    restart: unless-stopped
    ports:
      - "6379:6379"

  qdrant:
    image: qdrant/qdrant:latest
    container_name: macroferro_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333" # gRPC
      - "6334:6334" # REST
    volumes:
      - qdrant_storage:/qdrant/storage

  backend:
    build: ./backend
    container_name: macroferro_backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./scripts:/app/scripts # Montar el directorio de scripts
    depends_on:
      - postgres
      - redis
      - qdrant
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-macroferro_db}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      QDRANT_HOST: qdrant
      QDRANT_PORT_GRPC: 6333
      QDRANT_PORT_REST: 6334
      OPENAI_API_KEY: ${OPENAI_API_KEY} # Debe estar en un .env o ser exportada
      # Telegram Bot variables
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      TELEGRAM_WEBHOOK_SECRET: ${TELEGRAM_WEBHOOK_SECRET}
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  n8n:
    image: n8nio/n8n
    container_name: macroferro_n8n
    restart: unless-stopped
    ports:
      - "5678:5678" # Puerto por defecto de n8n
    environment:
      # --- Configuración para desarrollo local con NGROK ---
      # 1. Inicia ngrok en otra terminal: ngrok http 5678
      # 2. Copia la URL "Forwarding" de ngrok (ej: https://xxxx.ngrok-free.app)
      # 3. Pega esa URL en tu archivo .env en la variable WEBHOOK_URL
      # 4. Levanta el contenedor: docker-compose up -d n8n (o reinícialo: docker-compose restart n8n)
      - WEBHOOK_URL=${WEBHOOK_URL} # Esta variable es CRUCIAL. Debe ser la URL pública que te da ngrok.

      - GENERIC_TIMEZONE=Europe/Madrid # O tu zona horaria
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY} # ¡IMPORTANTE! Para encriptar credenciales.
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}

      # --- Las siguientes variables son para un dominio personalizado y NO se usan con ngrok gratuito ---
      # - N8N_HOST=${N8N_SUBDOMAIN}.${N8N_DOMAIN_NAME}
      # - N8N_PROTOCOL=${N8N_PROTOCOL}
    volumes:
      - n8n_data:/home/node/.n8n # Persistir datos de n8n (workflows, credenciales)
    depends_on: # Opcional, pero bueno si n8n necesita llamar al backend al inicio
      - backend

volumes:
  postgres_data:
  qdrant_storage:
  n8n_data: