#!/usr/bin/env python3
"""
Script de prueba para el bot de Telegram - Conversaci√≥n Natural Completa
Simula una conversaci√≥n real para verificar todas las funcionalidades
"""

import requests
import json
import time
import sys

# Configuraci√≥n del endpoint
BASE_URL = "http://localhost:8000"
ENDPOINT = f"{BASE_URL}/api/v1/telegram/test"

def send_message(text: str, chat_id: int = 123456789) -> dict:
    """Env√≠a un mensaje de prueba al bot y retorna la respuesta"""
    payload = {
        "message": {
            "message_id": int(time.time()),
            "from": {
                "id": chat_id,
                "is_bot": False,
                "first_name": "David",
                "username": "david_test"
            },
            "chat": {
                "id": chat_id,
                "type": "private"
            },
            "date": int(time.time()),
            "text": text
        }
    }
    
    try:
        response = requests.post(ENDPOINT, json=payload, timeout=30)
        return {"success": True, "data": response.json()}
    except Exception as e:
        return {"success": False, "error": str(e)}

def print_conversation(user_msg: str, bot_response: dict):
    """Imprime la conversaci√≥n de manera bonita"""
    print(f"\nüë§ Usuario: {user_msg}")
    
    if not bot_response["success"]:
        print(f"‚ùå Error: {bot_response['error']}")
        return
    
    data = bot_response["data"]
    response_type = data.get("type", "unknown")
    
    print(f"ü§ñ Bot ({response_type}):")
    
    if response_type == "text_messages":
        messages = data.get("messages", [])
        for msg in messages:
            print(f"   üí¨ {msg}")
    
    elif response_type == "product_with_image":
        product = data.get("product", {})
        caption = data.get("caption", "")
        additional = data.get("additional_messages", [])
        
        print(f"   üñºÔ∏è Producto: {product.get('name', 'N/A')} (SKU: {product.get('sku', 'N/A')})")
        print(f"   üìù Caption: {caption[:100]}...")
        
        for msg in additional:
            print(f"   üí¨ {msg}")
    
    else:
        print(f"   üìã Datos: {json.dumps(data, indent=2, ensure_ascii=False)}")

def main():
    """Ejecuta una conversaci√≥n completa de prueba"""
    print("üöÄ Iniciando conversaci√≥n de prueba completa...")
    print("=" * 60)
    
    # Conversaci√≥n Natural Completa
    conversation = [
        # 1. Saludo inicial
        "Hola, buenos d√≠as",
        
        # 2. B√∫squeda de producto espec√≠fico que sabemos que existe
        "Busco Tornillos UNC para Pl√°stico Facom",
        
        # 3. Pregunta espec√≠fica sobre ese producto
        "¬øQu√© especificaciones tienen esos tornillos UNC?",
        
        # 4. Agregar producto al carrito (referencia natural)
        "Agrega esos tornillos UNC al carrito",
        
        # 5. Buscar otro tipo de producto espec√≠fico
        "Necesito tambi√©n Tornillos M√©tricos para Pl√°stico Bosch",
        
        # 6. Agregar con cantidad espec√≠fica
        "Agrega 2 de esos tornillos m√©tricos al carrito",
        
        # 7. Ver carrito actual
        "Mu√©strame mi carrito",
        
        # 8. Pregunta t√©cnica sobre producto reciente
        "¬øCu√°l es el peso de los tornillos Bosch?",
        
        # 9. Quitar producto espec√≠fico
        "Quita los tornillos UNC del carrito",
        
        # 10. Ver carrito actualizado
        "¬øC√≥mo est√° mi carrito ahora?",
        
        # 11. Buscar producto por categor√≠a
        "Busco herramientas para construcci√≥n",
        
        # 12. Agregar herramienta espec√≠fica
        "Agrega el taladro Hilti al carrito",
        
        # 13. Finalizar compra
        "Quiero finalizar la compra",
        
        # 14. Verificar carrito despu√©s de compra
        "¬øEst√° vac√≠o mi carrito?",
        
        # 15. Despedida
        "Gracias, hasta luego"
    ]
    
    # Ejecutar conversaci√≥n paso a paso
    for i, message in enumerate(conversation, 1):
        print(f"\n{'='*10} PASO {i} {'='*10}")
        
        # Enviar mensaje
        response = send_message(message)
        
        # Mostrar conversaci√≥n
        print_conversation(message, response)
        
        # Pausa entre mensajes para simular conversaci√≥n real
        if i < len(conversation):
            print("\n‚è≥ Esperando 2 segundos...")
            time.sleep(2)
    
    print("\n" + "=" * 60)
    print("‚úÖ Conversaci√≥n de prueba completada!")
    print("\nüìä Resumen de funcionalidades probadas:")
    print("   ‚úì Saludo y conversaci√≥n general")
    print("   ‚úì B√∫squeda de productos por categor√≠a")
    print("   ‚úì Consultas t√©cnicas espec√≠ficas")
    print("   ‚úì Agregar productos al carrito (natural)")
    print("   ‚úì Agregar productos con cantidades espec√≠ficas")
    print("   ‚úì Ver contenido del carrito")
    print("   ‚úì Quitar productos del carrito")
    print("   ‚úì Finalizar compra")
    print("   ‚úì Vaciar carrito")
    print("   ‚úì Referencias contextuales ('ese producto', 'el √∫ltimo')")

if __name__ == "__main__":
    # Verificar que el backend est√© corriendo
    try:
        health_check = requests.get(f"{BASE_URL}/api/v1/telegram/health", timeout=5)
        if health_check.status_code != 200:
            print("‚ùå Backend no est√° respondiendo correctamente")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå No se puede conectar al backend: {e}")
        print("üí° Aseg√∫rate de que el backend est√© corriendo en localhost:8000")
        sys.exit(1)
    
    main() 