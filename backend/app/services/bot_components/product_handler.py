"""
Handler de Productos para el Bot de Telegram.

Este componente encapsula toda la l√≥gica de negocio relacionada con la
interacci√≥n del usuario con los productos del cat√°logo. Se encarga de:
- Interpretar y ejecutar b√∫squedas de productos.
- Gestionar consultas sobre el cat√°logo general.
- Proporcionar detalles espec√≠ficos de un producto.
- Responder a preguntas t√©cnicas usando IA.
- Resolver referencias ambiguas a productos (ej: "ese de ah√≠", "el segundo").
"""
import logging
import json
import re
from typing import Dict, Any, List, Optional
from sqlalchemy.orm import Session
import httpx

from app.core.config import settings
from app.services.product_service import ProductService
from app.services.context_service import context_service
from app.crud.product_crud import get_product_by_sku
from app.crud.conversation_crud import get_recent_products, add_recent_product
from app.api.deps import get_db
from app.crud import category_crud

logger = logging.getLogger(__name__)

class ProductHandler:
    """
    Gestiona toda la l√≥gica de negocio relacionada con productos.
    - B√∫squedas de productos
    - Consultas de detalles
    - Preguntas t√©cnicas
    - Resoluci√≥n de referencias a productos en el contexto de una conversaci√≥n
    """

    def __init__(self, product_service: ProductService, openai_client: Optional[Any] = None):
        """
        Inicializa el handler de productos.

        Args:
            product_service: Instancia del servicio de productos para acceso a la BD.
            openai_client: Cliente de OpenAI para consultas de IA (ej. preguntas t√©cnicas).
        """
        self.product_service = product_service
        self.openai_client = openai_client

    async def handle_intent(self, db: Session, intent_type: str, analysis: Dict, message_text: str, chat_id: int) -> Dict[str, Any]:
        """
        Punto de entrada principal para gestionar intenciones relacionadas con productos.
        Delega a m√©todos espec√≠ficos seg√∫n la intenci√≥n detectada por la IA.
        """
        search_terms = analysis.get("search_terms")
        query_text = " ".join(search_terms) if search_terms else message_text
        is_repetition = analysis.get("is_repetition", False)

        # L√≥gica de desambiguaci√≥n: ¬øLa b√∫squeda es por una categor√≠a?
        all_categories = category_crud.get_categories(db, limit=1000) # Obtener todas las categor√≠as
        
        matched_category = None
        for cat in all_categories:
            # Comprobaci√≥n simple (se puede mejorar con fuzzy matching)
            if query_text.lower() in cat.name.lower() or cat.name.lower() in query_text.lower():
                matched_category = cat
                break

        if matched_category:
            logger.info(f"La consulta '{query_text}' coincide con la categor√≠a '{matched_category.name}'. Buscando por categor√≠a.")
            return await self._handle_category_search(db, chat_id, matched_category, is_repetition)

        # 1. B√∫squeda expl√≠cita de productos (si no es una categor√≠a)
        if intent_type == "product_search":
            terms_to_use = search_terms if search_terms else [message_text]
            logger.info(f"Manejando 'product_search' con t√©rminos: {terms_to_use}")
            return await self._handle_product_search(db, chat_id, terms_to_use, is_repetition)

        # 2. Petici√≥n de detalles de producto (contextual)
        if intent_type == "product_details":
            logger.info("Manejando 'product_details'.")
            
            # Prioridad 1: Usar el SKU si la IA lo extrajo directamente.
            sku_reference = analysis.get("specific_product_mentioned")
            if sku_reference and re.match(r'SKU\d{5}', sku_reference.strip(), re.IGNORECASE):
                sku = sku_reference.strip().upper()
                logger.info(f"SKU extra√≠do directamente por la IA: {sku}")
            else:
                # Prioridad 2: Resolver referencia en lenguaje natural.
                logger.info("No se encontr√≥ SKU directo, intentando resolver referencia contextual.")
                sku = await self._resolve_product_reference(db, message_text, chat_id)

            if sku:
                product = get_product_by_sku(db, sku)
                if product:
                    add_recent_product(db, chat_id, product.sku)
                    caption = self._format_product_details(product)
                    suggestions = context_service.get_contextual_suggestions(db, chat_id)
                    return {
                        "type": "product_with_image",
                        "product": product,
                        "caption": caption,
                        "additional_messages": [suggestions]
                    }
            logger.warning(f"No se pudo resolver referencia para 'product_details' con texto: '{message_text}'. Fallback a b√∫squeda.")
            return await self._handle_product_search(db, chat_id, [message_text], is_repetition)
        
        # 3. Pregunta t√©cnica (contextual)
        if intent_type == "technical_question":
            logger.info("Manejando 'technical_question'.")
            return await self._handle_technical_question(db, chat_id, analysis, message_text)

        # 4. Consulta de cat√°logo general
        if intent_type == "catalog_inquiry":
            logger.info("Manejando 'catalog_inquiry'.")
            return self._handle_catalog_inquiry(db)

        # 5. Fallback para intenciones no manejadas
        logger.warning(f"Intenci√≥n no manejada por ProductHandler: {intent_type}. Respondiendo gen√©ricamente.")
        return self._handle_catalog_inquiry(db)


    def get_main_categories_formatted(self, db: Session) -> str:
        """
        Obtiene las categor√≠as principales de la base de datos y las formatea en un string.
        """
        main_categories = category_crud.get_root_categories(db)
        if not main_categories:
            return ""
        
        response_text = "Estas son nuestras categor√≠as principales:\n"
        response_text += "\n".join([f"‚Ä¢ {cat.name}" for cat in main_categories])
        return response_text
    
    def _handle_catalog_inquiry(self, db: Session) -> Dict[str, Any]:
        """
        Gestiona la consulta del cat√°logo de productos, mostrando las categor√≠as principales.
        """
        categories_text = self.get_main_categories_formatted(db)
        
        return {
            "type": "text_messages",
            "messages": [
                f"¬°Claro! En Macroferro somos especialistas en productos industriales.\n{categories_text}",
                "üí° Puedes preguntarme por cualquiera de ellas (ej: 'qu√© tienes en torniller√≠a') para ver m√°s detalles."
            ]
        }
    
    async def _handle_category_search(self, db: Session, chat_id: int, category: Any, is_repetition: bool = False) -> Dict[str, Any]:
        """
        Realiza una b√∫squeda de productos filtrando por una categor√≠a espec√≠fica.
        """
        logger.info(f"Buscando productos para la categor√≠a: '{category.name}'")
        
        # Usamos el product_crud directamente para buscar por category_id
        from app.crud import product_crud
        products = product_crud.get_products(db, category_id=category.category_id, limit=10)
        
        # Guardar los productos encontrados en el contexto reciente del chat
        for product in products:
            add_recent_product(db, chat_id, product.sku)

        if not products:
            return {
                "type": "text_messages",
                "messages": [
                    f"‚úÖ Categor√≠a: *{category.name}*\n\nü§î No he encontrado productos espec√≠ficos en esta categor√≠a en este momento, pero seguimos a√±adiendo m√°s a nuestro cat√°logo."
                ]
            }

        if is_repetition:
            response_text = f"S√≠, como te comentaba, en la categor√≠a *{category.name}* tenemos estos productos:\n\n"
        else:
            response_text = f"‚úÖ Categor√≠a: *{category.name}*\n\nHe encontrado {len(products)} productos:\n\n"

        for i, p in enumerate(products, 1):
            response_text += f"*{i}. {p.name}* ({p.sku})\n"
        
        suggestions = context_service.get_contextual_suggestions(db, chat_id)
        response_text += f"\n{suggestions}"
        
        return {
            "type": "text_messages",
            "messages": [response_text]
        }
        
    async def _handle_product_search(self, db: Session, chat_id: int, search_terms: List[str], is_repetition: bool = False) -> Dict[str, Any]:
        """
        Realiza una b√∫squeda de productos y formatea la respuesta.
        """
        query = " ".join(search_terms)
        logger.info(f"Buscando productos para la consulta: '{query}'")
        
        products_dict = await self.product_service.search_products(db, query_text=query, top_k=5)
        products = products_dict.get("products", [])
        
        # Guardar los productos encontrados en el contexto reciente del chat
        for product in products:
            add_recent_product(db, chat_id, product.sku)
            
        # Formatear la respuesta
        if not products:
            if is_repetition:
                return {
                    "type": "text_messages",
                    "messages": [
                        f"He buscado de nuevo, pero sigo sin encontrar nada para '{query}'.",
                        "Podr√≠amos probar con otros t√©rminos, o quiz√°s explorar una categor√≠a. ¬øQu√© prefieres?"
                    ]
                }
            return {
                "type": "text_messages",
                "messages": [
                    f"ü§î No he encontrado resultados para '{query}'.",
                    "Intenta con otros t√©rminos. Por ejemplo, en lugar de 'destornillador de estrella', prueba 'destornillador Phillips'."
                ]
            }
        
        if len(products) == 1:
            product = products[0]
            caption = self._format_product_details(product)
            suggestions = context_service.get_contextual_suggestions(db, chat_id)
            return {
                "type": "product_with_image",
                "product": product,
                "caption": caption,
                "additional_messages": [suggestions]
            }
        else:
            if is_repetition:
                response_text = f"S√≠, claro. Como te comentaba, esto es lo que encontr√© para '{query}':\n\n"
            else:
                response_text = f"üîç He encontrado {len(products)} productos relacionados con '{query}':\n\n"
            for i, p in enumerate(products, 1):
                response_text += f"*{i}. {p.name}* ({p.sku})\n"
            
            suggestions = context_service.get_contextual_suggestions(db, chat_id)
            response_text += f"\n{suggestions}"
            
            return {
                "type": "text_messages",
                "messages": [response_text]
            }
    
    async def _handle_technical_question(self, db: Session, chat_id: int, analysis: Dict, question: str) -> Dict[str, Any]:
        """
        Responde a una pregunta t√©cnica sobre un producto usando IA y el contexto.
        """
        product_reference = analysis.get("specific_product_mentioned", "el producto")
        
        # Primero, intenta resolver la referencia a un producto concreto
        sku = await self._resolve_product_reference(db, product_reference, chat_id)
        if not sku:
            return {"type": "text_messages", "messages": [f"No estoy seguro de a qu√© producto te refieres con '{product_reference}'. ¬øPodr√≠as ser m√°s espec√≠fico?"]}
            
        product = get_product_by_sku(db, sku)
        if not product:
            return {"type": "text_messages", "messages": [f"No encontr√© el producto con SKU {sku}."]}
            
        # Ahora, con el producto, consulta a OpenAI
        if not self.openai_client:
            return {"type": "text_messages", "messages": ["Lo siento, la funci√≥n de an√°lisis t√©cnico no est√° disponible en este momento."]}
            
        prompt = f"""
        Eres un experto t√©cnico de Macroferro. Un cliente pregunta sobre el producto '{product.name}' (SKU: {product.sku}).
        Descripci√≥n del producto: {product.description}
        Caracter√≠sticas: {product.get_caracteristicas_str()}
        
        Pregunta del cliente: "{question}"
        
        Bas√°ndote en la informaci√≥n que tienes, responde a la pregunta de forma clara y concisa. Si no tienes la respuesta, ind√≠calo amablemente.
        """
        
        try:
            response = await self.openai_client.chat.completions.create(
                model="gpt-4-turbo",
                messages=[{"role": "system", "content": prompt}],
                temperature=0.2,
                max_tokens=250
            )
            answer = response.choices[0].message.content
            
            suggestions = context_service.get_contextual_suggestions(db, chat_id)
            return {"type": "text_messages", "messages": [answer, suggestions]}
            
        except Exception as e:
            logger.error(f"Error consultando a OpenAI para pregunta t√©cnica: {e}")
            return {"type": "text_messages", "messages": ["Lo siento, tuve un problema al generar la respuesta t√©cnica."]}

    def _format_product_details(self, product) -> str:
        """
        Formatea los detalles de un solo producto para una presentaci√≥n clara.
        """
        price_str = f"{product.price:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        
        details = (
            f"*{product.name}*\n"
            f"`SKU: {product.sku}`\n\n"
            f"{product.description}\n\n"
            f"Brand: {product.brand if product.brand else 'N/A'}\n"
            f"Categor√≠a: {product.category.name if product.category else 'N/A'}\n"
            f"*Precio: {price_str} ‚Ç¨*\n"
        )
        
        if product.spec_json:
            features = "\n".join([f"‚Ä¢ *{key.replace('_', ' ').capitalize()}:* {value}" for key, value in product.spec_json.items()])
            if features:
                details += f"\n*Caracter√≠sticas:*\n{features}"
            
        return details

    async def _resolve_product_reference(self, db: Session, reference: str, chat_id: int, action_context: str = None) -> Optional[str]:
        """
        Resuelve una referencia textual a un producto (ej: "ese martillo", "el n√∫mero 2")
        bas√°ndose en el contexto de la conversaci√≥n.
        """
        reference_lower = reference.lower()
        
        # Caso 0: Referencia directa al √∫ltimo producto visto (ej: "este", "esa", "el √∫ltimo")
        demonstratives = ["este", "esta", "ese", "esa", "eso", "el √∫ltimo", "la √∫ltima"]
        if any(word in demonstratives for word in reference_lower.split()):
            recent_products = get_recent_products(db, chat_id, limit=1)
            if recent_products:
                sku = recent_products[0]
                logger.info(f"Referencia demostrativa '{reference}' resuelta al √∫ltimo SKU visto: {sku}.")
                return sku

        # Caso 1: Referencia num√©rica (ej: "el 2", "n√∫mero 3")
        match = re.search(r'(?:del|el|n√∫mero|la)\s+(\d+)', reference_lower)
        if match:
            try:
                index = int(match.group(1)) - 1
                # INVERTIR la lista de productos recientes para que el orden coincida con la visualizaci√≥n
                recent_products = get_recent_products(db, chat_id, limit=10)[::-1]
                if 0 <= index < len(recent_products):
                    sku = recent_products[index]
                    logger.info(f"Referencia num√©rica '{reference}' resuelta a SKU {sku} del historial.")
                    return sku
            except (ValueError, IndexError):
                logger.warning(f"No se pudo resolver la referencia num√©rica: '{reference}'")
                return None

        # Caso 2: Buscar en los productos que est√°n actualmente en el carrito
        if action_context == 'remove':
            try:
                async with httpx.AsyncClient(base_url=f"http://localhost:{settings.PORT}{settings.API_V1_STR}", timeout=10.0) as client:
                    response = await client.get(f"/cart/{chat_id}")
                    response.raise_for_status()
                    cart_data = response.json()
                    
                    cart_items = cart_data.get("items", {})
                    # La clave es el SKU, el valor es un dict con 'quantity' y 'product'
                    # El campo 'product' ahora es un diccionario, no un string JSON.
                    products_in_cart = [item['product'] for item in cart_items.values()]
                                        
                    # Buscamos en los productos del carrito
                    sku = self._search_reference_in_product_list(reference, products_in_cart)
                    if sku:
                        logger.info(f"Referencia '{reference}' resuelta a SKU '{sku}' desde el carrito.")
                        return sku
            except Exception as e:
                logger.error(f"Error al obtener carrito para resolver referencia '{action_context}': {e}")
            return None
        
        # Para otros contextos ('add' o ninguno), buscamos en el historial de productos vistos.
        product_skus = get_recent_products(db, chat_id, limit=10)
        if not product_skus:
            return None
        
        # Obtenemos los objetos Product completos
        temp_db_session = next(get_db())
        try:
            products = [get_product_by_sku(temp_db_session, sku) for sku in product_skus if get_product_by_sku(temp_db_session, sku)]
        finally:
            temp_db_session.close()

        return self._search_reference_in_product_list(reference, products)

    def _search_reference_in_product_list(self, reference: str, product_list: List[Any]) -> Optional[str]:
        """Busca la referencia en una lista de productos y devuelve el SKU del mejor match."""
        if not product_list:
            return None

        best_match_score = 0
        best_match_sku = None
        
        reference_words = set(re.findall(r'\b\w+\b', reference.lower()))
        
        for product in product_list:
            # Esta funci√≥n puede recibir objetos de producto (de la BD) o dicts (del carrito).
            # Hay que manejar ambos casos.
            is_dict = isinstance(product, dict)
            name = product.get('name', '') if is_dict else getattr(product, 'name', '')
            description = product.get('description', '') if is_dict else getattr(product, 'description', '')
            sku = product.get('sku') if is_dict else getattr(product, 'sku', None)
            
            if not sku:
                continue

            product_text = f"{name} {description}".lower()
            product_words = set(re.findall(r'\b\w+\b', product_text))
            
            score = len(reference_words.intersection(product_words))
            
            if score > best_match_score:
                best_match_score = score
                best_match_sku = sku

        if best_match_sku:
            logger.info(f"Referencia '{reference}' resuelta a SKU {best_match_sku} con puntuaci√≥n {best_match_score}.")
        else:
            logger.warning(f"No se pudo encontrar un match para la referencia '{reference}'.")
            
        return best_match_sku