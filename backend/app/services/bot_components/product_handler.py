# backend/app/services/bot_components/product_handler.py
"""
Servicio de Productos para el Bot de Telegram.

Este componente encapsula toda la l√≥gica de negocio relacionada con la
interacci√≥n del usuario con los productos del cat√°logo. Se encarga de:
- Interpretar y ejecutar b√∫squedas de productos.
- Gestionar consultas sobre el cat√°logo general.
"""
import logging
import json
import re
from typing import Dict, Any, List, Optional
from sqlalchemy.ext.asyncio import AsyncSession
import httpx

from app.core.config import settings
from app.services.product_service import ProductService
from app.services.context_service import context_service
from app.crud.product_crud import get_product_by_sku
from app.crud.conversation_crud import get_recent_products, add_recent_product, get_user_context, update_user_context
from app.api.deps import get_db
from app.crud import category_crud, product_crud

logger = logging.getLogger(__name__)

class ProductHandler:
    """
    Gestiona toda la l√≥gica de negocio relacionada con productos.
    - B√∫squedas de productos
    - Consultas de detalles
    - Preguntas t√©cnicas
    - Resoluci√≥n de referencias a productos en el contexto de una conversaci√≥n
    """

    def __init__(self, product_service: ProductService, openai_client: Optional[Any] = None):
        """
        Inicializa el handler de productos.

        Args:
            product_service: Instancia del servicio de productos para acceso a la BD.
            openai_client: Cliente de OpenAI para consultas de IA (ej. preguntas t√©cnicas).
        """
        self.product_service = product_service
        self.openai_client = openai_client

    async def handle_intent(self, db: AsyncSession, intent_type: str, analysis: Dict, message_text: str, chat_id: int) -> Dict[str, Any]:
        """
        Punto de entrada principal para gestionar intenciones relacionadas con productos.
        Delega a m√©todos espec√≠ficos seg√∫n la intenci√≥n detectada por la IA.
        """
        search_terms = analysis.get("search_terms")
        query_text = " ".join(search_terms) if search_terms else message_text
        is_repetition = analysis.get("is_repetition", False)

        # L√≥gica de desambiguaci√≥n: ¬øLa b√∫squeda es por una categor√≠a?
        all_categories = await category_crud.get_categories(db, limit=1000) # Obtener todas las categor√≠as
        
        matched_category = None
        for cat in all_categories:
            # Comprobaci√≥n simple (se puede mejorar con fuzzy matching)
            if query_text.lower() in cat.name.lower() or cat.name.lower() in query_text.lower():
                matched_category = cat
                break

        if matched_category:
            logger.info(f"La consulta '{query_text}' coincide con la categor√≠a '{matched_category.name}'. Buscando por categor√≠a.")
            return await self._handle_category_search(db, chat_id, matched_category, is_repetition)

        # 1. B√∫squeda expl√≠cita de productos (si no es una categor√≠a)
        if intent_type == "product_search":
            terms_to_use = search_terms if search_terms else [message_text]
            logger.info(f"Manejando 'product_search' con t√©rminos: {terms_to_use}")
            return await self._handle_product_search(db, chat_id, terms_to_use, is_repetition)

        # 2. Petici√≥n de detalles de producto (contextual)
        if intent_type == "product_details":
            logger.info("Manejando 'product_details'.")
            
            # Prioridad 1: Usar el SKU si la IA lo extrajo directamente.
            sku_reference = analysis.get("specific_product_mentioned")
            if sku_reference and re.match(r'SKU\d{5}', sku_reference.strip(), re.IGNORECASE):
                sku = sku_reference.strip().upper()
                logger.info(f"SKU extra√≠do directamente por la IA: {sku}")
            else:
                # Prioridad 2: Resolver referencia en lenguaje natural.
                logger.info("No se encontr√≥ SKU directo, intentando resolver referencia contextual.")
                sku = await self._resolve_product_reference(message_text, chat_id)

            if sku:
                product = await get_product_by_sku(db, sku)
                if product:
                    product_data = product.to_dict() # Convertir a dict
                    await add_recent_product(chat_id, product_data)
                    caption = self._format_product_details(product)
                    suggestions = await context_service.get_contextual_suggestions(chat_id, db)
                    return {
                        "type": "product_with_image",
                        "product": product,
                        "caption": caption,
                        "additional_messages": [suggestions]
                    }
            logger.warning(f"No se pudo resolver referencia para 'product_details' con texto: '{message_text}'. Fallback a b√∫squeda.")
            return await self._handle_product_search(db, chat_id, [message_text], is_repetition)
        
        # 3. Pregunta t√©cnica (contextual)
        if intent_type == "technical_question":
            logger.info("Manejando 'technical_question'.")
            return await self._handle_technical_question(db, chat_id, analysis, message_text)

        # 4. Consulta de cat√°logo general
        if intent_type == "catalog_inquiry":
            logger.info("Manejando 'catalog_inquiry'.")
            return await self._handle_catalog_inquiry(db)

        # 5. Fallback para intenciones no manejadas
        logger.warning(f"Intenci√≥n no manejada por ProductHandler: {intent_type}. Respondiendo gen√©ricamente.")
        return await self._handle_catalog_inquiry(db)


    async def get_main_categories_formatted(self, db: AsyncSession) -> str:
        """
        Obtiene las categor√≠as principales de la base de datos y las formatea en un string.
        """
        main_categories = await category_crud.get_root_categories(db)
        if not main_categories:
            return ""
        
        response_text = "Estas son nuestras categor√≠as principales:\n"
        response_text += "\n".join([f"‚Ä¢ {cat.name}" for cat in main_categories])
        return response_text
    
    async def _handle_catalog_inquiry(self, db: AsyncSession) -> Dict[str, Any]:
        """
        Gestiona la consulta del cat√°logo de productos, mostrando las categor√≠as principales.
        """
        categories_text = await self.get_main_categories_formatted(db)
        
        return {
            "type": "text_messages",
            "messages": [
                f"¬°Claro! En Macroferro somos especialistas en productos industriales.\n{categories_text}",
                "üí° Puedes preguntarme por cualquiera de ellas (ej: 'qu√© tienes en torniller√≠a') para ver m√°s detalles."
            ]
        }
    
    async def _handle_category_search(self, db: AsyncSession, chat_id: int, category: Any, is_repetition: bool = False) -> Dict[str, Any]:
        """
        Realiza una b√∫squeda de productos filtrando por una categor√≠a espec√≠fica.
        """
        logger.info(f"Buscando productos para la categor√≠a: '{category.name}'")
        
        # Usamos el product_crud directamente para buscar por category_id
        products = await product_crud.get_products(db, category_id=category.category_id, limit=10)
        
        # Guardar los productos encontrados en el contexto reciente del chat
        product_dicts = [p.to_dict() for p in products]
        for p_dict in product_dicts:
            await add_recent_product(chat_id, p_dict)

        if not products:
            return {
                "type": "text_messages",
                "messages": [
                    f"‚úÖ Categor√≠a: *{category.name}*\n\nü§î No he encontrado productos espec√≠ficos en esta categor√≠a en este momento, pero seguimos a√±adiendo m√°s a nuestro cat√°logo."
                ]
            }

        if is_repetition:
            response_text = f"S√≠, como te comentaba, en la categor√≠a *{category.name}* tenemos estos productos:\n\n"
        else:
            response_text = f"‚úÖ Categor√≠a: *{category.name}*\n\nHe encontrado {len(products)} productos:\n\n"

        for i, p in enumerate(products, 1):
            response_text += f"*{i}. {p.name}* ({p.sku})\n"
        
        suggestions = await context_service.get_contextual_suggestions(chat_id, db)
        response_text += f"\n{suggestions}"
        
        return {
            "type": "text_messages",
            "messages": [response_text]
        }
        
    async def _handle_product_search(self, db: AsyncSession, chat_id: int, search_terms: List[str], is_repetition: bool = False) -> Dict[str, Any]:
        """
        Realiza una b√∫squeda de productos y formatea la respuesta.
        """
        query = " ".join(search_terms)
        logger.info(f"Buscando productos para la consulta: '{query}'")
        
        products_dict = await self.product_service.search_products(db, query_text=query, top_k=5)
        products = products_dict.get("products", [])
        
        # Guardar los productos encontrados en el contexto reciente del chat
        product_dicts = [p.to_dict() for p in products]
        for p_dict in product_dicts:
            await add_recent_product(chat_id, p_dict)
            
        # Formatear la respuesta
        if not products:
            if is_repetition:
                return {
                    "type": "text_messages",
                    "messages": [
                        f"He buscado de nuevo, pero sigo sin encontrar nada para '{query}'.",
                        "Podr√≠amos probar con otros t√©rminos, o quiz√°s explorar una categor√≠a. ¬øQu√© prefieres?"
                    ]
                }
            return {
                "type": "text_messages",
                "messages": [
                    f"ü§î No he encontrado resultados para '{query}'.",
                    "Intenta con otros t√©rminos. Por ejemplo, en lugar de 'destornillador de estrella', prueba 'destornillador Phillips'."
                ]
            }
        
        if len(products) == 1:
            product = products[0]
            caption = self._format_product_details(product)
            suggestions = await context_service.get_contextual_suggestions(chat_id, db)
            return {
                "type": "product_with_image",
                "product": product,
                "caption": caption,
                "additional_messages": [suggestions]
            }
        else:
            if is_repetition:
                response_text = f"S√≠, claro. Como te comentaba, esto es lo que encontr√© para '{query}':\n\n"
            else:
                response_text = f"üîç He encontrado {len(products)} productos relacionados con '{query}':\n\n"
            for i, p in enumerate(products, 1):
                response_text += f"*{i}. {p.name}* ({p.sku})\n"
            
            suggestions = await context_service.get_contextual_suggestions(chat_id, db)
            response_text += f"\n{suggestions}"
            
            return {
                "type": "text_messages",
                "messages": [response_text]
            }
    
    async def _handle_technical_question(self, db: AsyncSession, chat_id: int, analysis: Dict, question: str) -> Dict[str, Any]:
        """
        Responde a una pregunta t√©cnica sobre un producto usando IA y el contexto.
        """
        sku_reference = analysis.get("specific_product_mentioned")
        
        # Resolver la referencia a un producto espec√≠fico (SKU)
        if sku_reference and re.match(r'SKU\d{5}', sku_reference.strip(), re.IGNORECASE):
            sku = sku_reference.strip().upper()
        else:
            sku = await self._resolve_product_reference(question, chat_id)

        if not sku:
            return {
                "type": "text_messages",
                "messages": ["No estoy seguro de a qu√© producto te refieres. ¬øPuedes ser m√°s espec√≠fico?"]
            }

        product = await get_product_by_sku(db, sku)
        if not product:
            return {
                "type": "text_messages",
                "messages": ["No pude encontrar los detalles para ese producto. Intenta buscarlo de nuevo."]
            }

        # Guardar en contexto reciente
        await add_recent_product(chat_id, product.to_dict())

        # Usar OpenAI para responder la pregunta t√©cnica
        logger.info(f"Usando OpenAI para responder pregunta t√©cnica sobre el producto {sku}.")
        
        # Crear el prompt para la IA
        system_prompt = (
            "Eres un asistente t√©cnico experto de la ferreter√≠a Macroferro. "
            "Tu √∫nica tarea es responder preguntas t√©cnicas sobre un producto espec√≠fico usando la informaci√≥n proporcionada. "
            "S√© conciso y directo. Si la informaci√≥n no est√° disponible, ind√≠calo claramente."
        )
        
        user_prompt = (
            f"Producto: {product.name} (SKU: {product.sku})\n"
            f"Descripci√≥n: {product.description}\n"
            f"Especificaciones: {json.dumps(product.spec_json, indent=2)}\n\n"
            f"Pregunta del cliente: '{question}'"
        )

        try:
            response = await self.openai_client.chat.completions.create(
                model=settings.OPENAI_MODEL,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.2,
                max_tokens=200
            )
            answer = response.choices[0].message.content
            
            # Formateo de la respuesta
            formatted_answer = f"Sobre el *{product.name}*:\n\n{answer}"
            
            return {
                "type": "text_messages",
                "messages": [formatted_answer]
            }
        except Exception as e:
            logger.error(f"Error llamando a la API de OpenAI: {e}")
            return {
                "type": "text_messages",
                "messages": ["Lo siento, no pude procesar la pregunta t√©cnica en este momento."]
            }

    def _format_product_details(self, product) -> str:
        """
        Formatea los detalles de un producto en un string legible para el usuario.
        """
        price_str = f"{product.price:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
        details = f"üì¶ *{product.name}*\n"
        details += f"üîñ SKU: `{product.sku}`\n"
        details += f"üî© Marca: {product.brand}\n"
        details += f"üí∞ Precio: ${price_str}\n\n"
        if product.description:
            details += f"üìù *Descripci√≥n:*\n{product.description}\n\n"
        
        if product.spec_json:
            details += "üìã *Especificaciones t√©cnicas:*\n"
            for key, value in product.spec_json.items():
                details += f"‚Ä¢ {key.replace('_', ' ').capitalize()}: {value}\n"
        
        return details.strip()

    async def _resolve_product_reference(self, reference: str, chat_id: int) -> Optional[str]:
        """
        Resuelve una referencia en lenguaje natural a un SKU de producto, bas√°ndose en el
        contexto reciente. Prioriza referencias num√©ricas/ordinales y luego por keyword.

        Returns:
            El SKU del producto resuelto, o None si no se puede resolver.
        """
        logger.info(f"Resolviendo referencia: '{reference}' para el chat {chat_id}")
        
        user_context = await get_user_context(chat_id)
        recent_products = user_context.get("recent_products", [])
        
        if not recent_products:
            logger.warning(f"No hay productos recientes en el contexto para resolver la referencia '{reference}'")
            return None

        # Estrategia 1: B√∫squeda por ordinales num√©ricos (ej: "el 2", "dame el 5to")
        # Busca un n√∫mero aislado, opcionalmente precedido por palabras y/o art√≠culos.
        match = re.search(r'(?:el|la|del|dame|ponme|n√∫mero|producto|#)\s*(\d+)', reference, re.IGNORECASE)
        if not match:
             # Fallback para casos como "el 6" o "el 5" donde no hay espacio
            match = re.search(r'\b(\d+)\b', reference)

        if match:
            try:
                index = int(match.group(1)) - 1  # Convertir a √≠ndice base 0
                if 0 <= index < len(recent_products):
                    sku = recent_products[index]['sku']
                    logger.info(f"Referencia '{reference}' resuelta por ordinal num√©rico a SKU: {sku}")
                    return sku
            except (ValueError, IndexError):
                pass # El n√∫mero encontrado no es un √≠ndice v√°lido

        # Estrategia 2: B√∫squeda por ordinales de texto ("el primero", "el √∫ltimo")
        ordinal_map = {"primero": 0, "segundo": 1, "tercero": 2, "cuarto": 3, "quinto": 4, "√∫ltimo": -1}
        for word, index in ordinal_map.items():
            if word in reference.lower():
                # Asegurarnos de que el √≠ndice sea v√°lido para la lista actual de productos
                if -len(recent_products) <= index < len(recent_products):
                    sku = recent_products[index]['sku']
                    logger.info(f"Referencia '{reference}' resuelta por ordinal de texto a SKU: {sku}")
                    return sku
        
        # Estrategia 3: B√∫squeda por palabras clave en nombre, marca o SKU (como fallback)
        for product in recent_products:
            if reference.lower() in product.get('name', '').lower() or \
               reference.lower() in product.get('brand', '').lower() or \
               reference.lower() == product.get('sku', '').lower():
                logger.info(f"Referencia '{reference}' resuelta por keyword a SKU: {product['sku']}")
                return product['sku']

        logger.warning(f"No se pudo resolver la referencia '{reference}' con las estrategias actuales.")
        return None