"""
Servicio para gestionar la l칩gica de contexto y fluidez de la conversaci칩n.

Este m칩dulo se encarga de analizar el estado actual de la conversaci칩n
para proporcionar sugerencias proactivas y mejorar la naturalidad del bot.
"""
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Dict, Any
from app.crud import conversation_crud as crud

class ContextService:

    async def get_contextual_suggestions(self, chat_id: int, db: AsyncSession) -> str:
        """
        Genera una cadena de texto con sugerencias contextuales basadas en las 칰ltimas acciones.
        """
        history = await crud.get_conversation_history(chat_id, limit_turns=2)
        last_bot_message = ""
        if history and history[-1]["role"] == "assistant":
            last_bot_message = history[-1]["content"].lower()

        suggestions = []

        # L칩gica basada en el contenido del 칰ltimo mensaje del bot
        if "he a침adido el producto a tu carrito" in last_bot_message:
            return "Puedes seguir buscando, `ver tu carrito` o `finalizar la compra`."
        elif "aqu칤 est치n los detalles" in last_bot_message:
            suggestions = ["a침adirlo al carrito", "preguntar por productos similares", "volver a buscar"]
        elif "encontr칠 estos productos" in last_bot_message or "aqu칤 tienes algunos productos de la categor칤a" in last_bot_message:
            suggestions = ["pedir m치s detalles de un producto (ej: 'dime m치s del 2')", "a침adir uno al carrito (ej: 'a침ade el 1')"]
        elif "estos son los detalles de tu carrito" in last_bot_message:
            return "Puedes `eliminar` un producto, `vaciar` el carrito, `seguir comprando` o `finalizar la compra`."
        else: # Default
            suggestions = ["buscar productos (ej: 'busco tornillos')", "ver las categor칤as"]
            
        if not suggestions:
            return "Recuerda que puedes `ver el carrito` o pedir `ayuda`."
            
        # Formatear sugerencias en una sola l칤nea
        return "游눠 Ahora, puedes " + " o ".join(suggestions) + "."

# Instancia singleton del servicio
context_service = ContextService()
